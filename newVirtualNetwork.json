{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.2",
    "parameters": {
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]"
        },
        "adminUsername": {
            "type": "string"
        },
        "adminPassword": {
            "type": "securestring"
        },
        "clusterName": {
            "type": "string"
        },
        "clusterSize": {
            "type": "int"
        },
        "vmSKU": {
            "type": "string"
        },
        "sizeOfDataDiskInGB": {
            "type": "int"
        },
        "publicIPAddressName": {
            "type": "string",
            "defaultValue": "[concat(toLower(parameters('clusterName')),'-pip')]"
        },
        "publicIPAddressIsNew": {
            "type": "bool",
            "defaultValue": true
        },
        "loadBalancerName": {
            "type": "string",
            "defaultValue": "[concat(toLower(parameters('clusterName')),'-lb')]"
        },
        "resourceApiVersion": {
            "type": "string"
        },
        "networkApiVersion": {
            "type": "string"
        },
        "computeApiVersion": {
            "type": "string"
        },
        "virtualNetworkName": {
            "type": "string"
        },
        "addressPrefix": {
            "type": "string"
        },
        "virtualNetworkSubnetName": {
            "type": "string"
        },
        "subnetPrefix": {
            "type": "string"
        },
        "existingVnetId": {
            "type": "string",
            "metadata": {
                "description": "This is only needed to align the same parameters to existing vnet"
            }
        },
        "scriptsUri": {
            "type": "string"
        },
        "enableOdbcConnector": {
            "type": "bool"
        },
        "enableCaravel": {
            "type": "bool"
        },
        "enableKibana": {
            "type": "bool"
        },
        "licenseKey": {
            "type": "string"
        },
        "vmSpec": {
            "type": "object"
        },
        "kineticaTags": {
            "type": "object"
        },
        "artifactsBase": {
            "type": "string",
            "metadata": {
                "artifactsBaseUrl": "",
                "description": "base URL at which Marketplace package files are stored. Value adjusted automatically during Marketplace submission process."
            },
            "defaultValue": "https://raw.githubusercontent.com/woodychristy/azure-arm/master"
        }
    },
    "variables": {
        "namingInfix": "[toLower(substring(concat(parameters('clusterName'), uniqueString(resourceGroup().id)), 0, 9))]",
        "networkSpec": {
            "publicIPAddressName": "[parameters('publicIPAddressName')]",
            "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('publicIPAddressName'))]",
            "frontEndIPConfigID": "[concat(resourceId('Microsoft.Network/loadBalancers',parameters('loadBalancerName')),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
            "loadBalancerName": "[parameters('loadBalancerName')]",
            "lbID": "[resourceId('Microsoft.Network/loadBalancers',parameters('loadBalancerName'))]",
            "bePoolName": "[concat(variables('namingInfix'), 'bepool')]",
            "sshNatPoolName": "[concat(variables('namingInfix'), 'sshNatPool')]",
            "sshNatStartPort": 50000,
            "sshNatEndPort": 50099,
            "sshNatBackEndPort": 22,
            "adminUiNatPoolName": "[concat(variables('namingInfix'), 'adminUiNatPool')]",
            "adminUiStartPort": 8080,
            "adminUiEndPort": 8080,
            "adminUiBackEndPort": 8080,
            "apiNatPoolName": "[concat(variables('namingInfix'), 'apiNatPool')]",
            "apiStartPort": 9191,
            "apiEndPort": 9191,
            "apiBackEndPort": 9191,
            "revealNatPoolName": "[concat(variables('namingInfix'), 'revealNatPool')]",
            "revealStartPort": 8088,
            "revealEndPort": 8088,
            "revealBackEndPort": 8088
        },
        "installKinetica": "[concat( parameters('scriptsUri'), 'installKinetica.sh')]",
        "singleQuote": "'"
    },
    "resources": [
        {
            "apiVersion": "[parameters('resourceAPIVersion')]",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[parameters('virtualNetworkName')]",
            "location": "[parameters('location')]",
            "tags": "[parameters('kineticaTags')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[parameters('virtualNetworkSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('networkSpec').publicIPAddressName]",
            "location": "[parameters('location')]",
            "apiVersion": "[parameters('networkApiVersion')]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                  "domainNameLabel": "[parameters('publicIPAddressName')]"
                }
            },
            "condition": "[parameters('publicIPAddressIsNew')]"
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "[variables('networkSpec').loadBalancerName]",
            "location": "[parameters('location')]",
            "apiVersion": "[parameters('networkApiVersion')]",
            "tags": "[parameters('kineticaTags')]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('networkSpec').publicIPAddressName)]"
            ],
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontEnd",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[variables('networkSpec').publicIPAddressID]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "[variables('networkSpec').bePoolName]"
                    }
                ],
                "inboundNatPools": [
                    {
                        "name": "[variables('networkSpec').sshNatPoolName]",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('networkSpec').frontEndIPConfigID]"
                            },
                            "protocol": "tcp",
                            "frontendPortRangeStart": "[variables('networkSpec').sshNatStartPort]",
                            "frontendPortRangeEnd": "[variables('networkSpec').sshNatEndPort]",
                            "backendPort": "[variables('networkSpec').sshNatBackEndPort]"
                        }
                    },
                    {
                        "name": "[variables('networkSpec').adminUiNatPoolName]",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('networkSpec').frontEndIPConfigID]"
                            },
                            "protocol": "tcp",
                            "frontendPortRangeStart": "[variables('networkSpec').adminUiStartPort]",
                            "frontendPortRangeEnd": "[variables('networkSpec').adminUiEndPort]",
                            "backendPort": "[variables('networkSpec').adminUiBackEndPort]"
                        }
                    },
                    {
                        "name": "[variables('networkSpec').apiNatPoolName]",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('networkSpec').frontEndIPConfigID]"
                            },
                            "protocol": "tcp",
                            "frontendPortRangeStart": "[variables('networkSpec').apiStartPort]",
                            "frontendPortRangeEnd": "[variables('networkSpec').apiEndPort]",
                            "backendPort": "[variables('networkSpec').apiBackEndPort]"
                        }
                    },
                    {
                        "name": "[variables('networkSpec').revealNatPoolName]",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('networkSpec').frontEndIPConfigID]"
                            },
                            "protocol": "tcp",
                            "frontendPortRangeStart": "[variables('networkSpec').revealStartPort]",
                            "frontendPortRangeEnd": "[variables('networkSpec').revealEndPort]",
                            "backendPort": "[variables('networkSpec').revealBackEndPort]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "name": "[parameters('clusterName')]",
            "location": "[parameters('location')]",
            "apiVersion": "[parameters('computeApiVersion')]",
            "tags": "[parameters('kineticaTags')]",
            "dependsOn": [
                "[concat('Microsoft.Network/loadBalancers/', variables('networkSpec').loadBalancerName)]",
                "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]"
            ],
            "plan": {
                "name": "[parameters('vmSpec').sku]",
                "product": "[parameters('vmSpec').offer]",
                "publisher": "[parameters('vmSpec').publisher]"
            },
            "sku": {
                "name": "[parameters('vmSKU')]",
                "capacity": "[parameters('clusterSize')]"
            },
            "properties": {
                "overprovision": false,
                "singlePlacementGroup": true,
                "upgradePolicy": {
                    "mode": "Manual"
                },
                "virtualMachineProfile": {
                    "storageProfile": {
                        "osDisk": {
                            "caching": "ReadOnly",
                            "createOption": "FromImage"
                        },
                        "dataDisks": [
                            {
                                "diskSizeGB": "[parameters('sizeOfDataDiskInGB')]",
                                "lun": 0,
                                "createOption": "Empty"
                            }
                        ],
                        "imageReference": "[parameters('vmSpec')]"
                    },
                    "osProfile": {
                        "computerNamePrefix": "[parameters('clusterName')]",
                        "adminUsername": "[parameters('adminUsername')]",
                        "adminPassword": "[parameters('adminPassword')]"
                    },
                    "networkProfile": {
                        "networkInterfaceConfigurations": [
                            {
                                "name": "[parameters('virtualNetworkName')]",
                                "properties": {
                                    "primary": true,
                                    "ipConfigurations": [
                                        {
                                            "name": "myIpConfig",
                                            "properties": {
                                                "subnet": {
                                                    "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '/subnets/',parameters('virtualNetworkSubnetName'))]"
                                                },
                                                "loadBalancerBackendAddressPools": [
                                                    {
                                                        "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('networkSpec').loadBalancerName, '/backendAddressPools/', variables('networkSpec').bePoolName)]"
                                                    }
                                                ],
                                                "loadBalancerInboundNatPools": [
                                                    {
                                                        "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('networkSpec').loadBalancerName, '/inboundNatPools/', variables('networkSpec').sshNatPoolName)]"
                                                    },
                                                    {
                                                        "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('networkSpec').loadBalancerName, '/inboundNatPools/', variables('networkSpec').adminUiNatPoolName)]"
                                                    },
                                                    {
                                                        "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('networkSpec').loadBalancerName, '/inboundNatPools/', variables('networkSpec').apiNatPoolName)]"
                                                    },
                                                    {
                                                        "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('networkSpec').loadBalancerName, '/inboundNatPools/', variables('networkSpec').revealNatPoolName)]"
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "extensionProfile": {
                        "extensions": [
                            {
                                "name": "installKinetica",
                                "properties": {
                                    "publisher": "Microsoft.Azure.Extensions",
                                    "settings": {
                                        "fileUris": [
                                            "[variables('installKinetica')]"
                                        ]
                                    },
                                    "protectedSettings": {
                                        "commandToExecute": "[concat('bash installKinetica.sh ',parameters('clusterName'),' ',parameters('clusterSize'),' ',reference(resourceId('Microsoft.Network/publicIPAddresses',parameters('publicIPAddressName')),parameters('networkApiVersion')).dnsSettings.fqdn,' ',parameters('enableOdbcConnector'),' ',parameters('enableCaravel'),' ',parameters('enableKibana'),' ',parameters('adminUsername'),' ',variables('singleQuote'),parameters('adminPassword'),variables('singleQuote'),' ',parameters('vmSKU'),' ',variables('singleQuote'),parameters('licenseKey'),variables('singleQuote'),' AZURE') ]"
                                    },
                                    "typeHandlerVersion": "2.0",
                                    "autoUpgradeMinorVersion": true,
                                    "type": "CustomScript"
                                }
                            }
                        ]
                    }
                }
            }
        }
    ]
}